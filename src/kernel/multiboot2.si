MultiBoot2 :: module {
    [[ extern ]] multiboot_magic:      u32;
    [[ extern ]] multiboot_info_addr: *u8;

    TAG_ALIGN                  :: 8;
    TAG_TYPE_END               :: 0;
    TAG_TYPE_CMDLINE           :: 1;
    TAG_TYPE_BOOT_LOADER_NAME  :: 2;
    TAG_TYPE_MODULE            :: 3;
    TAG_TYPE_BASIC_MEMINFO     :: 4;
    TAG_TYPE_BOOTDEV           :: 5;
    TAG_TYPE_MMAP              :: 6;
    TAG_TYPE_VBE               :: 7;
    TAG_TYPE_FRAMEBUFFER       :: 8;
    TAG_TYPE_ELF_SECTIONS      :: 9;
    TAG_TYPE_APM               :: 10;
    TAG_TYPE_EFI32             :: 11;
    TAG_TYPE_EFI64             :: 12;
    TAG_TYPE_SMBIOS            :: 13;
    TAG_TYPE_ACPI_OLD          :: 14;
    TAG_TYPE_ACPI_NEW          :: 15;
    TAG_TYPE_NETWORK           :: 16;
    TAG_TYPE_EFI_MMAP          :: 17;
    TAG_TYPE_EFI_BS            :: 18;
    TAG_TYPE_EFI32_IH          :: 19;
    TAG_TYPE_EFI64_IH          :: 20;
    TAG_TYPE_LOAD_BASE_ADDR    :: 21;

    Info :: struct {
        size:      u32,
        _reserved: u32,
    }

    Tag :: struct {
        ty:   u32,
        size: u32,
    }

    enumerate_tags :: proc() {
        info: *Info = cast(*Info, multiboot_info_addr);

        kprint("======== MultiBoot2 ========\n");
        kprint("magic:   {X}\n", multiboot_magic);
        kprint("address: {}\n", multiboot_info_addr);
        kprint("  size:  {}\n", info.size);

        ptr := multiboot_info_addr + 8;

        tag: *Tag = cast(*Tag, ptr);
        loop ; tag.ty != TAG_TYPE_END;  {
            kprint("    TAG @ {}: {}, size {}\n", cast(*u8, tag), tag.ty, tag.size);
            ptr += tag.size;
            loop ; cast(u64, ptr) & 0x7; { ptr += 4; }
            tag = cast(*Tag, ptr);
        }
        kprint("    TAG @ {}: {}, size {}\n", cast(*u8, tag), tag.ty, tag.size);
        kprint("Done.\n");
    }
}
